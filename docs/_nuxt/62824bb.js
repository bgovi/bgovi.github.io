(window.webpackJsonp=window.webpackJsonp||[]).push([[16],{538:function(e,t,n){"use strict";n.r(t);var r={data:function(){return{jc:"console.log('Hello World sup')",tech_reqs:["User Interface: Quickly generate interfaces that are personalized to each users requirements.","API: Generate API endpoints for automated and coding based interfaces","Analytics: Provide personalized views for analytic systems such as PowerBI or Tableau.","Dynamic Permissions: Quickly enable and change user permissions on any set of given rules.","Historical Record: Backup and recovery of data as well as seeing time based snap shots"],cfte_defs:[{eqn:"cFTE = Total_FTE - (Academic_FTE + Research_FTE + Administrative_FTE)",desc:"The total effort is subtracted from the sum of sub appointment values. All parameters must be between 0 and 1",name:"One Minus"},{eqn:"cFTE = clinical_effort/total_effort",desc:"Fraction of hours assigned for clinical work divided by the providers total appointment",name:"Fractional"},{eqn:"cFTE = (hrs_per_session*assigned_sessions + hrs_per_shift*assigned_shifts)/(hrs_per_session*max_sessions + hrs_per_shift*max_shifts)",desc:"Shifts and sessions are nomenclature for a full and half days worth of work. Each shift and session is assigned a duration. The cfte is calculated as fraction of hours worked based on appointed shifts and sessions",name:"Shift and Sessions"}],jsonx:o,pe_table:d,current_effort:c,as_of_effort:l,version_trigger:f,rls:h,trls:m}}},o="[\n  {field: 'name',  type: 'string'},\n  {field: 'sport', type: 'json'  }, \n  {field: 'date',  type: 'date'  },\n  {field: 'wins',  type: 'int'   }\n]\n",d='--base table structure for storing all effort data\nCREATE EXTENSION IF NOT EXISTS btree_gist;\nCREATE TABLE provider_effort\n(\n    id               big serial,    --record id should not be changed\n    "valid"          tstzrange,     --maintains record version\n    user_id          big integer,   --user_id in this context should be a provider\n    effective_date   date,          --when the cfte values should take precedence\n    cfte_def_id      big integer    --the cfte definition id from the cfte_definitions table\n    cfte             json,          --contains the cfte information. \n    last_modified_by big integer    --the user who made the last change\n    EXCLUDE USING gist (id WITH =, valid WITH &&)\n);\n/*\nEXCLUDE USING gist (id WITH =, valid WITH &&)\nEXCLUDE: Indicates that an exclusion constraint is being defined.\nUSING gist: Specifies that the constraint will use a GiST index.\n(id WITH =, valid WITH &&): Defines the exclusion condition. In this case, it\'s a combination of two conditions:\nid WITH =: Specifies that the id column values must be equal for the rows being compared.\nvalid WITH &&: Specifies that the valid column values must have overlapping ranges. The && operator is the "overlaps" operator for range types.\n*/\n',c="--the current valid cfte records\nCREATE VIEW current_provider_effort as\nSELECT user_id, effective_date, cfte_def_id, cfte, last_modified_by\nFROM provider_effort\nWHERE current_timestamp <@ valid\n",l="/*\nUsing the current_settings overload the view and transaction below provides a method to view\nthe cfte records at any given point in time.\n*/\nCREATE VIEW as_of_provider_effort AS\n    SELECT  user_id, effective_date, cfte_def_id, cfte, last_modified_by\n    FROM    provider_effort\n    WHERE   current_setting('app.as_of_time')::timestamptz <@ valid;\n\n--Run Query\nBEGIN;\nSET app.as_of_time = {datetime value};\nSELECT * FROM as_of_provider_effort;\nCOMMIT;\n",f="/*\nThe version trigger overwrites the basic insert, update and delete operations inorder to maitain\nthe provider_effort historical record.\n*/\nCREATE FUNCTION version_trigger() RETURNS trigger AS\n$$\nBEGIN\n    IF TG_OP = 'UPDATE'\n    THEN\n        IF NEW.id <> OLD.id\n        THEN\n            RAISE EXCEPTION 'the ID must not be changed';\n        END IF;\n \n        UPDATE  provider_effort\n        SET     valid = tstzrange(lower(valid), current_timestamp)\n        WHERE   id = NEW.id\n            AND current_timestamp <@ valid;\n \n        IF NOT FOUND THEN\n            RETURN NULL;\n        END IF;\n    END IF;\n \n    IF TG_OP IN ('INSERT', 'UPDATE')\n    THEN\n        INSERT INTO provider_effort (id, valid, user_id, effective_date, cfte_def_id, cfte, last_modified_by)\n            VALUES (NEW.id,\n                tstzrange(current_timestamp, TIMESTAMPTZ 'infinity'),\n                NEW.user_id,\n                NEW.effective_date,\n                NEW.cfte_def_id,\n                NEW.cfte,\n                NEW.last_modified_by\n                );\n        RETURN NEW;\n    END IF;\n \n    IF TG_OP = 'DELETE'\n    THEN\n        UPDATE  provider_effort\n        SET     valid = tstzrange(lower(valid), current_timestamp)\n        WHERE id = OLD.id\n            AND current_timestamp <@ valid;\n \n        IF FOUND THEN\n            RETURN OLD;\n        ELSE\n            RETURN NULL;\n        END IF;\n    END IF;\nEND;\n$$ LANGUAGE plpgsql;\n \nCREATE TRIGGER vtrigger\n    INSTEAD OF INSERT OR UPDATE OR DELETE\n    ON current_effort\n    FOR EACH ROW\n    EXECUTE PROCEDURE version_trigger();\n",h="/*\nUpdatable views provide a way to cleanly enforce column and row level security. Any data modification that\ninvalidated the where condition will be rejected. This has three conditional change requirements\n1.) The user is a manager of a provider. The user was a manager of a department when the provider was employed by\nthe department. The effective date used falls withing that overlap.\n2.) The user modifiying the data is the provider\n3.) The user is an admin. \n\n*/\nCREATE VIEW user_department as\nSELECT * FROM department_employees\nWHERE user_id = current_setting('app.user_id');\n\n\nCREATE VIEW provider_effort_user_perms\nSELECT * FROM current_effort\nWHERE \n( \n  \n  EXISTS \n  ( \n    --provider in users department\n    SELECT 1\n    FROM  users \n    WHERE current_effort.provider_id  = users.id\n      AND users.is_provider = true\n      AND  current_effort.provider_id IN\n      (SELECT user_id\n        FROM department_employees\n        WHERE department_id IN (select department_id FROM user_department )\n        AND current_effort.effective_date BETWEEN department_employees.start_date AND department_employees.end_date    \n      )\n  )\n  AND\n  EXISTS (\n    --is manager\n    SELECT 1\n    FROM users\n    WHERE users.id = current_setting('app.user_id') AND users.is_manager = true\n  )\n\n) OR\nEXISTS ( \n--user is provider  \nSELECT 1\nFROM users\nWHERE users.id = provider_id AND users.id = current_setting('app.user_id')\n) OR\ncurrent_setting('app.user_is_admin') = true\n",m="--enforces rls permissions on all modification queries\nBEGIN;\nSET app.user_id = {user_id};\n--crud_statement i.e. select/insert/update/delete--\nCOMMIT;\n",_=r,v=n(35),component=Object(v.a)(_,(function(){var e=this,t=e._self._c;return t("div",[e._m(0),e._v(" "),t("section",{staticClass:"section",staticStyle:{"padding-top":"0px"}},[t("div",{staticClass:"container"},[t("div",{staticClass:"content"},[e._m(1),e._v(" "),t("p",[e._v("\n\n      Master Data Management (MDM) is a method of managing an organization's critical data. \n      A Master Data Management system is a comprehensive solution designed to create and maintain a single, \n      consistent, accurate, and complete version of master data across an organization. Government and healthcare institutions provide\n      a unique challenge for MDM systems as their workflows are often process driven based on current affairs. Correctly managing their data requires\n      dynamic full stack frameworks that can quickly manage and implement complex workflows. These workflows can have user entry and visualization requirements based on\n      time, location, employment and other fluid relationships.\n\n      ")]),e._v(" "),e._m(2),e._v(" "),t("ol",e._l(e.tech_reqs,(function(n,r){return t("li",{key:r},[e._v(" "+e._s(n))])})),0)])])]),e._v(" "),t("section",{staticClass:"section",staticStyle:{"padding-top":"0px","padding-bottom":"0px"}},[t("div",{staticClass:"container"},[e._m(3),e._v("\n      Clinical full-time effort (cFTE) typically refers to the amount of time a healthcare professional, such as a physician or researcher, \n      dedicates to clinical activities. It implies that the individual is engaged in clinical work on a full-time basis, which may \n      include patient care, consultations, procedures, and other clinical responsibilities. The specific definition can vary depending on \n      institutional or contractual agreements.\n      "),t("br"),e._v(" "),t("br"),e._v("\n      A current data management issue in healthcare that rquires MDM like features is how to best maintain and update cFTEs.\n      cFTEs are not strictly defined and there can be hundreds of definitions within an organizaiton. Each definition can be indepedently \n      assigned to a provider at different points in time. The individuals responsible for maintaining a given providers cFTE changes daily. \n      The cFTE system requires rules that can be quickly implmeneted to track responsibilities and accuracy of entered data. This cFTE information\n      is often distributed at a system level to monitor productivity and distribute hospital resources to a department.\n      Below are a few example calculations and their corresponding definitions.\n      "),t("br"),e._v(" "),t("br"),e._v(" "),t("div",{staticClass:"content"},[e._m(4),e._v(" "),t("ol",e._l(e.cfte_defs,(function(n,r){return t("li",{key:r},[e._v(" "+e._s(n.eqn))])})),0),e._v(" "),e._m(5),e._v(" "),t("ol",e._l(e.cfte_defs,(function(n,r){return t("li",{key:r},[e._v(" "+e._s(n.desc))])})),0)])])]),e._v(" "),e._m(6),e._v(" "),t("section",{staticClass:"section",staticStyle:{"padding-top":"0px"}},[t("div",{staticClass:"container"},[e._m(7),e._v(" "),t("pre",{staticStyle:{background:"white"}},[e._v("        "),t("code",{directives:[{name:"highlight",rawName:"v-highlight"}],staticClass:"json atom-one-dark"},[e._v(e._s(e.jsonx))]),e._v("\n    ")]),e._v(" "),e._m(8)])]),e._v(" "),t("section",{staticClass:"section",staticStyle:{"padding-top":"0px"}},[t("div",{staticClass:"container"},[t("div",{staticClass:"content"},[e._m(9),e._v(" "),t("p",[e._v("\n        A core component of an MDM system is the ability to time travel. Seeing how the state of data has \n        changed between iterations. This is achieved in postgres by changing the default behavior of \n        crud operations using views, indexes and triggers. User information are contained in JWT tokens. User\n        credentials are dynamically injected into dynamic views to create the proper RLS restraints. Below is an \n        example of creating RLS and as of queries with the provider_effort table. This approach is added to each\n        table individually.\n\n      ")]),e._v(" "),t("pre",{staticStyle:{background:"white","margin-bottom":"0px","padding-bottom":"0px","padding-top":"0px"}},[e._v("        "),t("code",{directives:[{name:"highlight",rawName:"v-highlight"}],staticClass:"pgsql atom-one-dark"},[e._v(e._s(e.pe_table))]),e._v("\n    ")]),e._v(" "),t("pre",{staticStyle:{background:"white","margin-bottom":"0px","padding-bottom":"0px","padding-top":"0px"}},[e._v("        "),t("code",{directives:[{name:"highlight",rawName:"v-highlight"}],staticClass:"pgsql atom-one-dark"},[e._v(e._s(e.current_effort))]),e._v("\n    ")]),e._v(" "),t("pre",{staticStyle:{background:"white","margin-bottom":"0px","padding-bottom":"0px","padding-top":"0px"}},[e._v("        "),t("code",{directives:[{name:"highlight",rawName:"v-highlight"}],staticClass:"pgsql atom-one-dark"},[e._v(e._s(e.version_trigger))]),e._v("\n    ")]),e._v(" "),t("pre",{staticStyle:{background:"white","margin-bottom":"0px","padding-bottom":"0px","padding-top":"0px"}},[e._v("        "),t("code",{directives:[{name:"highlight",rawName:"v-highlight"}],staticClass:"pgsql atom-one-dark"},[e._v(e._s(e.as_of_effort))]),e._v("\n    ")]),e._v(" "),t("pre",{staticStyle:{background:"white","margin-bottom":"0px","padding-bottom":"0px","padding-top":"0px"}},[e._v("        "),t("code",{directives:[{name:"highlight",rawName:"v-highlight"}],staticClass:"pgsql atom-one-dark"},[e._v(e._s(e.rls))]),e._v("\n    ")]),e._v(" "),t("pre",{staticStyle:{background:"white","margin-bottom":"0px","padding-bottom":"0px","padding-top":"0px"}},[e._v("        "),t("code",{directives:[{name:"highlight",rawName:"v-highlight"}],staticClass:"pgsql atom-one-dark"},[e._v(e._s(e.trls))]),e._v("\n    ")])])])]),e._v(" "),e._m(10)])}),[function(){var e=this._self._c;return e("section",{staticClass:"section",staticStyle:{"padding-bottom":"24px"}},[e("div",{staticClass:"container"},[e("h1",{staticClass:"title"},[this._v("Master Data Management (cFTE)")])])])},function(){var e=this._self._c;return e("p",{staticClass:"subtitle"},[e("strong",[this._v("Main Scope of Problem")])])},function(){var e=this._self._c;return e("p",[e("strong",[this._v("Technical Requirements")])])},function(){var e=this._self._c;return e("h1",{staticClass:"subtitle"},[e("strong",[this._v("cFTE Definitions")])])},function(){var e=this._self._c;return e("p",[e("strong",[this._v("Definitions")])])},function(){var e=this._self._c;return e("p",[e("strong",[this._v("Description")])])},function(){var e=this,t=e._self._c;return t("section",{staticClass:"section",staticStyle:{"padding-bottom":"24px"}},[t("div",{staticClass:"container"},[t("h1",{staticClass:"subtitle"},[t("strong",[e._v("Data Schema Structure")])]),e._v(" "),t("p",{staticStyle:{"padding-bottom":"24px"}},[e._v("\n      Below is an example structure of the schema used to managed provider cfte data. The users table maintains information of the organizations staff. Users\n      can be providers, managers and/or other employees of the company. Each user belongs to one or more departments. The time that a user is employed by a \n      department are stored in the start and end dates. A manager can maintain a providers cfte information based on if the provider is managed by the user \n      based on departamental and employment overlap. Each user can modify their own cfte data. Each record change for each table is stored indefinitely.\n      The time the record was created/modified and the endpoint of activity is stored in each tables valid column. Managers are generally responsible for\n      the provider_effort and cfte_definitions table. Everything else is managed by the systems active directory. The person who last changed the record is\n      stored in the last_modified_by column.\n    ")]),e._v(" "),t("div",{staticClass:"content"},[t("div",{staticClass:"has-text-centered"},[t("figure",{staticClass:"image is-16x9 is-inline-block",staticStyle:{"max-width":"1000px"}},[t("img",{attrs:{src:"/img/projects/mdm/mdm.svg",alt:"Centered image"}})])])])])])},function(){var e=this,t=e._self._c;return t("div",{staticClass:"content"},[t("p",{staticClass:"subtitle"},[t("strong",[e._v("Fast Apps")])]),e._v(" "),t("p",[e._v("\n        The user interfaces for data collection are powered by AgGrid. The table and data entry structure for a given cfte rule is stored in the \n        cfte_definitions.definition column. This column is a json configuration that defines the cfte and user interface rules. AgGrid allows for\n        custom data components to be created for more complicated use cases. The important note is that any created cfte rule will automatically map\n        to a UI display and API endpoint. Below is an example json configuration and how the entry form would be displayed by the end user.\n      ")])])},function(){var e=this._self._c;return e("div",{staticClass:"content"},[e("div",{staticClass:"has-text-centered"},[e("figure",{staticClass:"image is-16x9 is-inline-block"},[e("img",{attrs:{src:"/img/projects/mdm/UI_Generator.jpg",alt:"Centered image"}})])])])},function(){var e=this._self._c;return e("p",{staticClass:"subtitle"},[e("strong",[this._v("Time Travel, Row Level Security and Dynamic views")])])},function(){var e=this,t=e._self._c;return t("section",{staticClass:"section",staticStyle:{"padding-top":"0px"}},[t("div",{staticClass:"container"},[t("div",{staticClass:"content"},[t("p",{staticClass:"subtitle"},[t("strong",[e._v("Conclusion")])]),e._v(" "),t("p",[e._v("\n        The integration of Postgres, JWT and AgGrid provides an easily extensible environment for managing MDM systems.\n        With a little work any use case can be implemented. The primary advantage is that things are really easy from an application point of view\n        to implement. Implementing time travel can be done quite generically and most applications might not have to be changed at all. Most changes\n        can be made live through changes to json configuration files. New UI components will require the standard DevOps CI/CD approach. However, once\n        all unique components have been implemented, any standard SQL user can maintain and extend the cfte collection process.\n      ")])])])])}],!1,null,null,null);t.default=component.exports}}]);